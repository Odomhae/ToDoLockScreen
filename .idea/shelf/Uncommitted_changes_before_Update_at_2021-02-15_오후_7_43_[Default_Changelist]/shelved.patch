Index: app/src/main/java/com/odom/todolockscreen/ToDoLockScreenActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.odom.todolockscreen\r\n\r\n\r\nimport android.app.KeyguardManager\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport kotlinx.android.synthetic.main.activity_to_do_locksceen.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONException\r\nimport androidx.recyclerview.widget.ItemTouchHelper\r\nimport android.util.Log\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport kotlinx.android.synthetic.main.activity_to_do_locksceen.view.*\r\nimport android.content.DialogInterface\r\nimport android.graphics.Color\r\nimport android.graphics.Rect\r\nimport android.view.*\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AlertDialog\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\nimport kotlin.system.exitProcess\r\n\r\n\r\nclass ToDoLockScreenActivity : AppCompatActivity() {\r\n\r\n    // 빈 데이터 리스트 생성.\r\n    val lockScreenItems = ArrayList<String>()\r\n\r\n    // 앱 종료 여부 판단\r\n    var finn = false\r\n    var finBt = false\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        // 기존 잠금화면보다 먼저 나타나도록\r\n        // 버전별로\r\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1){\r\n            // 잠금화면에서 보여지게\r\n            setShowWhenLocked(true)\r\n            // 기존 잠금화면 해제\r\n            val keyguardManager = getSystemService(Context.KEYGUARD_SERVICE) as KeyguardManager\r\n            keyguardManager.requestDismissKeyguard(this, null)\r\n\r\n        }else{\r\n            // 잠금화면에서 보여지게\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED)\r\n            // 기존 잠금화면 해제\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD)\r\n        }\r\n\r\n        setContentView(R.layout.activity_to_do_locksceen)\r\n        swipeToFinish()\r\n\r\n        val listPref =  getStringArrayPref(\"listData\")\r\n        // 리스트 비었으면\r\n        if(listPref.size == 0){\r\n            Log.d(\"TAG\", \"할일 없음\")\r\n            finish()\r\n        }\r\n        else{\r\n            for (value in listPref)\r\n                lockScreenItems.add(value)\r\n\r\n            recyclerView.adapter = MyAdapter(listPref)\r\n\r\n            // 간격 30\r\n            val spaceDecoration = VerticalSpaceItemDecoration(30)\r\n            recyclerView.addItemDecoration(spaceDecoration)\r\n\r\n            initView()\r\n            val textColor = getInt(\"textColor\")\r\n            val listColor = getInt(\"listColor\")\r\n            Log.d(\"글자색 전달\", textColor.toString())\r\n            Log.d(\"아이템색 전달 \", listColor.toString())\r\n\r\n            (recyclerView.adapter as MyAdapter).getInts(textColor, listColor)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // 밀어서 잠금해제\r\n    private fun swipeToFinish(){\r\n\r\n        var startX = 0\r\n        var startY = 0\r\n\r\n        var endX = 0\r\n        var endY = 0\r\n        lockScreenBackground.setOnTouchListener { v, event ->\r\n            when(event.action){\r\n                MotionEvent.ACTION_DOWN -> {\r\n                    // 초기값\r\n                    startX =  event.x.toInt()\r\n                    startY =  event.y.toInt()\r\n                }\r\n\r\n                MotionEvent.ACTION_MOVE -> {\r\n                    // 이동 값\r\n                    endX = event.x.toInt()\r\n                    endY = event.y.toInt()\r\n                }\r\n\r\n                // 이동 끝내고 조건 맞으면 헤제\r\n                else -> {\r\n                    if( ((endX- startX)*(endX - startX)) + ((endY - startY)*(endY- startY)) >= 80000 )\r\n                        finish()\r\n                }\r\n            }\r\n            true\r\n        }\r\n\r\n    }\r\n\r\n    // 설정값 가져오기\r\n    fun getInt( key : String) : Int{\r\n        val prefs = getSharedPreferences(\"SETTINGS\", Context.MODE_PRIVATE)\r\n        return prefs.getInt(key, 0)\r\n    }\r\n\r\n    ////////////////////////\r\n    interface ItemDragListener{\r\n        fun onStartDrag(viewHolder: RecyclerView.ViewHolder)\r\n    }\r\n\r\n    class ViewHolder(itemView: View, listener: ItemDragListener) : RecyclerView.ViewHolder(itemView) {\r\n        init {\r\n            itemView.setOnTouchListener{v, event ->\r\n                if(event.action == MotionEvent.ACTION_DOWN)\r\n                    listener.onStartDrag(this)\r\n\r\n                false\r\n            }\r\n        }\r\n        // ...\r\n    }\r\n    ////////////////////////////////////\r\n\r\n    // 뷰 초기화\r\n    fun initView() {\r\n\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n\r\n        // 배경색\r\n        val backgroundColor = getInt(\"backgroundColor\")\r\n        when(backgroundColor){\r\n            0 -> {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorWhite))\r\n                // 삳태바도 같은 색으로 api 21 이상\r\n                window.statusBarColor = resources.getColor(R.color.colorWhite)\r\n                //상태바 글씨 보이게\r\n                window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR\r\n            }\r\n            1 -> {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorGray))\r\n                window.statusBarColor = resources.getColor(R.color.colorGray)\r\n                window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR\r\n            }\r\n            2 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorBlack))\r\n                window.statusBarColor = resources.getColor(R.color.colorBlack)\r\n            }\r\n            3 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorRed))\r\n                window.statusBarColor = resources.getColor(R.color.colorRed)\r\n            }\r\n            4 -> {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorCrimson))\r\n                window.statusBarColor = resources.getColor(R.color.colorCrimson)\r\n            }\r\n            5 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorSalmon))\r\n                window.statusBarColor = resources.getColor(R.color.colorSalmon)\r\n            }\r\n            6 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorBeige))\r\n                window.statusBarColor = resources.getColor(R.color.colorBeige)\r\n                window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR\r\n            }\r\n            7 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorOrange))\r\n                window.statusBarColor = resources.getColor(R.color.colorOrange)\r\n            }\r\n            8 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorBrown))\r\n                window.statusBarColor = resources.getColor(R.color.colorBrown)\r\n            }\r\n            9 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorWalnut))\r\n                window.statusBarColor = resources.getColor(R.color.colorWalnut)\r\n            }\r\n            10 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorBlue))\r\n                window.statusBarColor = resources.getColor(R.color.colorBlue)\r\n            }\r\n            11 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorMalibu))\r\n                window.statusBarColor = resources.getColor(R.color.colorMalibu)\r\n            }\r\n            12 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorGreen))\r\n                window.statusBarColor = resources.getColor(R.color.colorGreen)\r\n            }\r\n            13 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorYellowGreen))\r\n                window.statusBarColor = resources.getColor(R.color.colorYellowGreen)\r\n            }\r\n            14 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorMint))\r\n                window.statusBarColor = resources.getColor(R.color.colorMint)\r\n            }\r\n            15 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorYellow))\r\n                window.statusBarColor = resources.getColor(R.color.colorYellow)\r\n                window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR\r\n\r\n            }\r\n            16 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorPink))\r\n                window.statusBarColor = resources.getColor(R.color.colorPink)\r\n            }\r\n            17 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorViolet))\r\n                window.statusBarColor = resources.getColor(R.color.colorViolet)\r\n            }\r\n            18 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorMagenta))\r\n                window.statusBarColor = resources.getColor(R.color.colorMagenta)\r\n            }\r\n            19 ->  {\r\n                lockScreenBackground.setBackgroundColor(resources.getColor(R.color.colorPurple))\r\n                window.statusBarColor = resources.getColor(R.color.colorPurple)\r\n            }\r\n        }\r\n\r\n        // ItemTouchHelper 구현 (SDK Version 22부터 사용 가능)\r\n        ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {\r\n\r\n            // 위치 swap\r\n            override fun onMove(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder, target: RecyclerView.ViewHolder): Boolean {\r\n                Log.d(\"TAG\", \"위치 바꿉시다\")\r\n                recyclerView.adapter?.notifyItemMoved(viewHolder.adapterPosition, target.adapterPosition) //\r\n                MyAdapter(lockScreenItems).swap(viewHolder.adapterPosition, target.adapterPosition)\r\n                return true\r\n            }\r\n\r\n            override fun isLongPressDragEnabled(): Boolean {\r\n                Log.d(\"TAG\", \"오래누름\")\r\n                return false\r\n            }\r\n            override fun isItemViewSwipeEnabled(): Boolean {\r\n                return true\r\n            }\r\n\r\n            //밀어서 삭제\r\n            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {\r\n                // Adapter에 아이템 삭제 요청\r\n                val mDialogView = LayoutInflater.from(this@ToDoLockScreenActivity).inflate(R.layout.ask_box, null)\r\n                //AlertDialogBuilder\r\n                val mBuilder = AlertDialog.Builder(this@ToDoLockScreenActivity)\r\n                    .setView(mDialogView)\r\n\r\n                val mAlertDialog = mBuilder.show()\r\n\r\n                val noBt = mDialogView.findViewById(R.id.noButton) as Button\r\n                noBt.setOnClickListener {\r\n                    initView()\r\n                    mAlertDialog.dismiss()\r\n                }\r\n\r\n                val yesBt = mDialogView.findViewById(R.id.yesButton) as Button\r\n                yesBt.setOnClickListener {\r\n                    //잠금화면에서 지우고\r\n                    (recyclerView.adapter as MyAdapter).deleteList(viewHolder.adapterPosition)\r\n\r\n                    lockScreenItems.removeAt(viewHolder.layoutPosition)\r\n                    setStringArrayPref(\"listData\", lockScreenItems)\r\n\r\n                    mAlertDialog.dismiss()\r\n\r\n                    if(lockScreenItems.size == 0){\r\n                        finn = true\r\n\r\n                        //알림 & 화면 종료\r\n                        val builder = AlertDialog.Builder(this@ToDoLockScreenActivity)\r\n\r\n                        builder.setTitle(R.string.exit_app_message)\r\n                            .setIcon(R.mipmap.ic_launcher)\r\n                            .setMessage(R.string.nothing_left_message)\r\n                            .setPositiveButton(R.string.ok,\r\n                                DialogInterface.OnClickListener { dialog, id ->\r\n                                    finBt = true\r\n                                    finish()\r\n                                })\r\n                            .setNegativeButton(R.string.cancel,\r\n                                DialogInterface.OnClickListener { dialog, id ->\r\n                                    finish()\r\n                                })\r\n\r\n                        val alertDialog = builder.create()\r\n                        alertDialog.show()\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }).apply {\r\n\r\n            // ItemTouchHelper에 RecyclerView 설정\r\n            attachToRecyclerView(recyclerView)\r\n        }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n\r\n        // 할일 없고 앱 종료 버튼 눌렸으면\r\n        // 앱 종료\r\n        if (finn && finBt){\r\n            Log.d(\"TAG\",\"앱 프로세스 종료\")\r\n            exitProcess(0)\r\n        }\r\n    }\r\n\r\n    inner class VerticalSpaceItemDecoration(private val verticalSpaceHeight: Int) :\r\n        RecyclerView.ItemDecoration() {\r\n\r\n        override fun getItemOffsets(\r\n            outRect: Rect, view: View, parent: RecyclerView,\r\n            state: RecyclerView.State\r\n        ) {\r\n            // 첫번째면 위에도 여백\r\n            if(parent.getChildAdapterPosition(view) == 0){\r\n                outRect.top = verticalSpaceHeight\r\n            }\r\n\r\n            outRect.bottom = verticalSpaceHeight\r\n        }\r\n    }\r\n\r\n    class MyAdapter(private var datas: ArrayList<String>) : RecyclerView.Adapter<MyViewHolder>() {\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\r\n            val view = LayoutInflater.from(parent.context).inflate(R.layout.activity_to_do_locksceen, parent, false)\r\n            Log.d(\"TAG\" , \"onCreateViewHolder\")\r\n\r\n            return MyViewHolder(view)\r\n        }\r\n\r\n        // 글자, 아이템 색\r\n        var holderTextColor = 1\r\n        var holderItemColor = 1\r\n\r\n        override fun getItemCount(): Int {\r\n            return datas.size\r\n        }\r\n\r\n        // 설정값 넣어주고\r\n        fun getInts(a :Int, b :Int){\r\n            holderTextColor = a\r\n            holderItemColor = b\r\n        }\r\n\r\n\r\n        fun swap(firstPosition :Int, secondPosition : Int) {\r\n            Log.d(\"위치변경 \", firstPosition.toString())\r\n            Log.d(\"위치변경 \", secondPosition.toString())\r\n\r\n            Collections.swap(datas, firstPosition, secondPosition)\r\n            notifyItemMoved(firstPosition, secondPosition)\r\n        }\r\n\r\n        // 삭제\r\n        fun deleteList(position: Int){\r\n            datas.removeAt(position)\r\n\r\n            Log.d(\"삭제샹\", position.toString())\r\n            notifyDataSetChanged()\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\r\n            holder.textField.text = datas[position]\r\n\r\n            // 글자색\r\n            when(holderTextColor){\r\n                0-> holder.textField.setTextColor(Color.parseColor(\"#ffffff\"))\r\n                1-> holder.textField.setTextColor(Color.parseColor(\"#DCDCDC\"))\r\n                2-> holder.textField.setTextColor(Color.parseColor(\"#000000\"))\r\n                3-> holder.textField.setTextColor(Color.parseColor(\"#FF0023\"))\r\n                4-> holder.textField.setTextColor(Color.parseColor(\"#b80f0a\"))\r\n                5-> holder.textField.setTextColor(Color.parseColor(\"#FA8072\"))\r\n                6-> holder.textField.setTextColor(Color.parseColor(\"#F2DFD2\"))\r\n                7-> holder.textField.setTextColor(Color.parseColor(\"#f37021\"))\r\n                8-> holder.textField.setTextColor(Color.parseColor(\"#7c4700\"))\r\n                9-> holder.textField.setTextColor(Color.parseColor(\"#432711\"))\r\n                10-> holder.textField.setTextColor(Color.parseColor(\"#2C40DC\"))\r\n                11-> holder.textField.setTextColor(Color.parseColor(\"#ff89d3fb\"))\r\n                12-> holder.textField.setTextColor(Color.parseColor(\"#1CAE4C\"))\r\n                13-> holder.textField.setTextColor(Color.parseColor(\"#52D017\"))\r\n                14-> holder.textField.setTextColor(Color.parseColor(\"#69e0a5\"))\r\n                15-> holder.textField.setTextColor(Color.parseColor(\"#e8f321\"))\r\n                16-> holder.textField.setTextColor(Color.parseColor(\"#f987c5\"))\r\n                17-> holder.textField.setTextColor(Color.parseColor(\"#cc99ff\"))\r\n                18-> holder.textField.setTextColor(Color.parseColor(\"#FF00FF\"))\r\n                19-> holder.textField.setTextColor(Color.parseColor(\"#8b00ff\"))\r\n            }\r\n\r\n            // 각 아이템 색\r\n            when(holderItemColor){\r\n                0 -> holder.itemView.setBackgroundResource(R.color.colorBlack)\r\n                1 -> holder.itemView.setBackgroundResource(R.color.colorGray)\r\n                2 -> holder.itemView.setBackgroundResource(R.color.colorWhite)\r\n                3 -> holder.itemView.setBackgroundResource(R.color.colorRed)\r\n                4 -> holder.itemView.setBackgroundResource(R.color.colorCrimson)\r\n                5 -> holder.itemView.setBackgroundResource(R.color.colorSalmon)\r\n                6 -> holder.itemView.setBackgroundResource(R.color.colorBeige)\r\n                7 -> holder.itemView.setBackgroundResource(R.color.colorOrange)\r\n                8 -> holder.itemView.setBackgroundResource(R.color.colorBrown)\r\n                9 -> holder.itemView.setBackgroundResource(R.color.colorWalnut)\r\n                10 -> holder.itemView.setBackgroundResource(R.color.colorBlue)\r\n                11-> holder.itemView.setBackgroundResource(R.color.colorMalibu)\r\n                12 -> holder.itemView.setBackgroundResource(R.color.colorGreen)\r\n                13 -> holder.itemView.setBackgroundResource(R.color.colorYellowGreen)\r\n                14 -> holder.itemView.setBackgroundResource(R.color.colorMint)\r\n                15 -> holder.itemView.setBackgroundResource(R.color.colorYellow)\r\n                16 -> holder.itemView.setBackgroundResource(R.color.colorPink)\r\n                17 -> holder.itemView.setBackgroundResource(R.color.colorViolet)\r\n                18 -> holder.itemView.setBackgroundResource(R.color.colorMagenta)\r\n                19 -> holder.itemView.setBackgroundResource(R.color.colorPurple)\r\n\r\n                else -> holder.itemView.setBackgroundResource(R.drawable.item_view)\r\n            }\r\n\r\n            holder.itemView.isSelected = true\r\n\r\n            // 폭 설정\r\n            val layoutParams = holder.itemView.layoutParams\r\n            layoutParams.height = 120\r\n            holder.itemView.requestLayout()\r\n        }\r\n    }\r\n\r\n    class MyViewHolder(view: View): RecyclerView.ViewHolder(view) {\r\n        var textField = view.recyclerview_text\r\n    }\r\n\r\n    // JSON 배열로 저장\r\n    fun setStringArrayPref(key: String, values: ArrayList<String>) {\r\n        val prefs = getSharedPreferences(\"SETTINGS\", Context.MODE_PRIVATE)\r\n        val editor = prefs.edit()\r\n        val a = JSONArray()\r\n        for (i in 0 until values.size) {\r\n            a.put(values[i])\r\n        }\r\n        if (!values.isEmpty()) {\r\n            editor.putString(key, a.toString())\r\n        } else {\r\n            editor.putString(key, null)\r\n        }\r\n        editor.apply()\r\n    }\r\n\r\n\r\n    // 저장된 배열 받아옴\r\n    fun getStringArrayPref(key: String): ArrayList<String> {\r\n        val prefs = getSharedPreferences(\"SETTINGS\", Context.MODE_PRIVATE)\r\n        val json = prefs.getString(key, null)\r\n        val urls = ArrayList<String>()\r\n        if (json != null) {\r\n            try {\r\n                val a = JSONArray(json)\r\n                for (i in 0 until a.length()) {\r\n                    val url = a.optString(i)\r\n                    urls.add(url)\r\n                }\r\n            } catch (e: JSONException) {\r\n                e.printStackTrace()\r\n            }\r\n\r\n        }\r\n        return urls\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/odom/todolockscreen/ToDoLockScreenActivity.kt	(revision d1e01236d8364060be107ec5cdb0a43efbcb571a)
+++ app/src/main/java/com/odom/todolockscreen/ToDoLockScreenActivity.kt	(date 1613385401690)
@@ -137,7 +137,7 @@
                 false
             }
         }
-        // ...
+
     }
     ////////////////////////////////////
 
@@ -239,13 +239,16 @@
         }
 
         // ItemTouchHelper 구현 (SDK Version 22부터 사용 가능)
-        ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {
+        ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP or ItemTouchHelper.DOWN,
+            ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {
 
             // 위치 swap
             override fun onMove(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder, target: RecyclerView.ViewHolder): Boolean {
                 Log.d("TAG", "위치 바꿉시다")
                 recyclerView.adapter?.notifyItemMoved(viewHolder.adapterPosition, target.adapterPosition) //
                 MyAdapter(lockScreenItems).swap(viewHolder.adapterPosition, target.adapterPosition)
+                setStringArrayPref("listData", lockScreenItems)
+
                 return true
             }
 
